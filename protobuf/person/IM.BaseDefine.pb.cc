// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: IM.BaseDefine.proto

#include "IM.BaseDefine.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace IM {
namespace BaseDefine {
}  // namespace BaseDefine
}  // namespace IM
namespace IM {
namespace BaseDefine {
bool PhoneType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PhoneType_strings[3] = {};

static const char PhoneType_names[] =
  "PHONE_DEFAULT"
  "PHONE_HOME"
  "PHONE_WORK";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PhoneType_entries[] = {
  { {PhoneType_names + 0, 13}, 0 },
  { {PhoneType_names + 13, 10}, 1 },
  { {PhoneType_names + 23, 10}, 2 },
};

static const int PhoneType_entries_by_number[] = {
  0, // 0 -> PHONE_DEFAULT
  1, // 1 -> PHONE_HOME
  2, // 2 -> PHONE_WORK
};

const std::string& PhoneType_Name(
    PhoneType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PhoneType_entries,
          PhoneType_entries_by_number,
          3, PhoneType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PhoneType_entries,
      PhoneType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PhoneType_strings[idx].get();
}
bool PhoneType_Parse(
    const std::string& name, PhoneType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PhoneType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PhoneType>(int_value);
  }
  return success;
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace BaseDefine
}  // namespace IM
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
